import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    timeSeriesTable,
    dataVectorTable,
    dataCoordsTable,
    dataDimsTable,
  ];
  late final Shape0 timeSeriesTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'TimeSeriesTable',
        withoutRowId: true,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(name, ts)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 dataVectorTable = Shape1(
      source: i0.VersionedTable(
        entityName: 'DataVectorTable',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(name, ts, idx)',
          'FOREIGN KEY(name, ts)REFERENCES TimeSeriesTable(name, ts)',
        ],
        columns: [
          _column_3,
          _column_4,
          _column_0,
          _column_1,
          _column_5,
          _column_6,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 dataCoordsTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'DataCoordsTable',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(name, ts)',
          'FOREIGN KEY(name, ts)REFERENCES TimeSeriesTable(name, ts)',
        ],
        columns: [
          _column_3,
          _column_0,
          _column_1,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 dataDimsTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'DataDimsTable',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'UNIQUE(name, ts)',
          'FOREIGN KEY(name, ts)REFERENCES TimeSeriesTable(name, ts)',
        ],
        columns: [
          _column_3,
          _column_0,
          _column_1,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get ts =>
      columnsByName['ts']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get span =>
      columnsByName['span']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<DateTime> _column_1(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('ts', aliasedName, false,
        type: i1.DriftSqlType.dateTime, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('span', aliasedName, false,
        type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get idx =>
      columnsByName['idx']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get ts =>
      columnsByName['ts']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        $customConstraints: 'NOT NULL PRIMARY KEY AUTOINCREMENT');
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>('idx', aliasedName, false,
        type: i1.DriftSqlType.int, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('data', aliasedName, false,
        type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('type', aliasedName, false,
        type: i1.DriftSqlType.string, $customConstraints: 'NOT NULL');

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get ts =>
      columnsByName['ts']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get data =>
      columnsByName['data']! as i1.GeneratedColumn<String>;
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
